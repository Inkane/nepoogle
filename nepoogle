#!/usr/bin/env python2
# -*- coding: utf-8 -*-

#***************************************************************************
#*   nepoogle - a Nepomuk's search engine inspired in Google search syntax *
#*                                                                         *
#*   Copyright                                                             *
#*   (C) 2011,12 Ignacio Serantes <kde@aynoa.net>                          *
#*                                                                         *
#*   This program is free software; you can redistribute it and/or modify  *
#*   it under the terms of the GNU General Public License as published by  *
#*   the Free Software Foundation; either version 2 of the License, or     *
#*   (at your option) any later version.                                   *
#*                                                                         *
#*   This program is distributed in the hope that it will be useful,       *
#*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#*   GNU General Public License for more details.                          *
#*                                                                         *
#*   You should have received a copy of the GNU General Public License     *
#*   along with this program; if not, write to the                         *
#*   Free Software Foundation, Inc.,                                       *
#*   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.         *
#***************************************************************************

from __future__ import unicode_literals
import gettext
import os
import sys

import sip
API_NAMES = ["QDate", "QDateTime", "QString", "QTextStream", "QTime", "QUrl", "QVariant"]
API_VERSION = 2
for name in API_NAMES:
    sip.setapi(name, API_VERSION)

from PyQt4.QtGui import QApplication, QDesktopWidget
from PyKDE4.nepomuk import Nepomuk

from nepoogle import Nepoogle
from lglobals import DEFAULT_ENGINE, PROGRAM_VERSION_DATE, PROGRAM_VERSION_VERSION, PROGRAM_NAME
from clsparql import cSparqlBuilder, cDataFormat, hackQueryParser

#from PyKDE4.kdecore import ki18n, i18n, KCmdLineArgs, KAboutData
#from PyKDE4.kdeui import KApplication, KXmlGuiWindow, KStandardAction, KAction, KIcon
#from PyKDE4.kdecore import *

#_BUG: carácter ' de Singin' in the Rain
#_BUG: fallan las búsquedas con el carácter ":"
#_BUG: encoding incorrecto
#_BUG: sample rate se visualiza en notación científica
#_BUG: error: [Errno 5] Input/output error la llamar al programa sin la consola
#_BUG: uri incorrecta en el link al album de la pieza musical
#_BUG: if file is unplugged and contains character "]" file is not displayed properly
#_TODO: visualizar las fechas correctamente
#_TODO: los links a visor deben funcionar con los discos desconectados
#_BUG: Modifiers "+" and "-" were not working filtering commands.
#_BUG: Duplicate entries, one for rdf:type of resourcer, when self.caseInsensitiveSort = True
#_TODO: sort case insensitive, columna lower(?x) AS ?sort
#_TODO: añadir totales y tiempos en consola
#_TODO: añadir al resource viewer los siguientes links: . << < > >>
#_TODO: extraer tipo y label de la propia db. Esto está actualmente hardcoded y
#_TODO: musicpiece debe de incluir el intérprete
#_TODO: añadir más información al contacto en la vista de resultados
#_TODO: implementar cache al moverse de atrás adelante (ojo con la vista por partes)

#BUG: BUG001 -> negation without a shorcut is failing.
#TODO: better history management.
#TODO: bif:lower(?x) in ('x', 'y', 'z')
#TODO: añadir soporte a nepomuk:/ en consola
#TODO: visor de álbum debería incluir los intérpretes/creadores del mismo y la carátula
#TODO: mostrar estrellas en el rating por coherencia
#TODO: count()
#select count(?x0) as ?cuantos
#where {
#{
#query a contar
#}
#}
#TODO: configuración externa
#TODO: multilenguage
#TODO: paréntesis
#TODO: editor: gestionar comentarios, rating y tags.
#TODO: soporte para la modificación de comentarios
#TODO: soporte para la modificación del rating
#TODO: soporte para la gestión de tags. Idea:
#       Más usados: los 10 tags más usados listados alfabéticamente.
#       Usados: los últimos tags usados, debajo los últimos que has usado.
#       Alfabética: la vista normal.
#       Botón de eliminar todos.
#TODO: añadir soporte a --connect, --disconnect, --daemonize y moverlos a Nepoogle
#TODO: todo en html para que pueda ser un servidor.


_ = gettext.gettext


def buildHelp():
    print("%(name)s %(version)s (%(date)s)\n"
          % {'name': PROGRAM_NAME, 'version': PROGRAM_VERSION_VERSION, 'date': PROGRAM_VERSION_DATE})

    print("Usage: %s [command ] [query]\n"
          "\n"
          "commands:\n"
          "  --help           -- Shows this help\n"
          "  --gui[=MODE]     -- Mode: ON, OFF, force gui mode (defaults ON)\n"
          "  --results[=MODE] -- Mode: ON, OFF, displays results in console mode (defaults ON)\n"
          "  --verbose[=MODE] -- Mode: ON, OFF (defaults ON with --gui parameter)\n"
          "\n"
          "query:\n"
          "  Query syntax documentation is available in the gui mode help\n"
          % PROGRAM_NAME)


def main(args):
    #appName = PROGRAM_NAME
    #catalog = PROGRAM_NAME
    #programName = ki18n(PROGRAM_NAME)
    #version = PROGRAM_VERSION_VERSION
    #description = ki18n("An alternate search engine for Nepomuk inspired in Google search syntax.")
    #license = KAboutData.License_GPL
    #copyright = ki18n("(C) 2011 Ignacio Serantes")
    #text = ki18n("A search engine for Nepomuk.")
    #homePage = "http://kde-apps.org/content/show.php/Nepoogle?content=145505"
    #bugEmail = "kde@aynoa.net"

    #aboutData = KAboutData(appName, catalog, programName, version,
                            #description, license, copyright, text, homePage,
                            #bugEmail)

    #KCmdLineArgs.init(sys.argv, aboutData)

    #options = KCmdLineOptions()
    #options.add("--help", ki18n("this help"))
    #options.add("--gui", ki18n("force gui mode in console"))
    #options.add("--stdout", ki18n("force stdout in console mode"))
    #options.add("--nostdout", ki18n("force no stdout in gui mode"))
    #KCmdLineArgs.addCmdLineOptions(options)

    displayResults = None
    gui = not sys.stdout.isatty()
    verboseMode = None
    parameters = ''
    for i in range(1, len(args)):
        parameter = args[i].strip()

        if parameter.lower() == '--help':
            buildHelp()
            quit()

        elif parameter.lower()[:5] == '--gui':
            paramValue = parameter.lower()[5:]
            if paramValue == "" or paramValue == "=on":
                gui = True

            elif paramValue == "=off":
                gui = False

            else:
                print("ERROR: Unknown parameter \"%s\".\n" % parameter)
                buildHelp()
                quit()

            continue

        elif parameter.lower()[:9] == '--verbose':
            paramValue = parameter.lower()[9:]
            if paramValue == '':
                if verboseMode is None:
                    verboseMode = True

            elif paramValue == '=on':
                verboseMode = True

            elif paramValue == '=off':
                verboseMode = False

            else:
                print("ERROR: Unknown parameter \"%s\".\n" % parameter)
                buildHelp()
                quit()

            continue

        elif parameter.lower()[:9] == '--results':
            paramValue = parameter.lower()[9:]
            if paramValue == '':
                if verboseMode is None:
                    displayResults = True

            elif paramValue == '=on':
                displayResults = True

            elif paramValue == '=off':
                displayResults = False

            else:
                print("ERROR: Unknown parameter \"%s\".\n" % parameter)
                buildHelp()
                quit()

            continue

        elif parameter.find(' ') >= 0:
            j = parameter.rfind(':')
            if j >= 0:
                parameter = parameter[:j + 1] + '"' + parameter[j + 1:] + '"'

            else:
                parameter = '"' + parameter + '"'

        parameters += parameter + ' '

    searchString = parameters.strip()
    if gui:
        if verboseMode is None:
            verboseMode = gui

        #app = KApplication()
        #window = Nepoogle(searchString)
        #window.show()

        #if searchString != '':
        #    window.execQuery()

        app = QApplication(args)
        nepoogle = Nepoogle(None, searchString, verboseMode, QDesktopWidget().availableGeometry(-1))
        nepoogle.show()
        nepoogle.repaint()
        if searchString != '':
            nepoogle.execQuery()

        sys.exit(app.exec_())

    else:
        if verboseMode is None:
            verboseMode = False

        searchEngine = DEFAULT_ENGINE
        if searchString[:3].lower() in ('e0 ', 'e1 ', 'e2 '):
            searchEngine = int(searchString[1:2])

        output = "%(title)s\n" % {'title': 'Querying Nepomuk'}
        print(output)

        #if True:
        try:
            warningsList = []
            oSparql = cSparqlBuilder()
            if searchString != '':

                if searchEngine == 0:
                    oNQP = Nepomuk.Query.QueryParser()
                    query = oNQP.parse(searchString[3:]).toSparqlQuery()
                    oNQP = None
                    if verboseMode:
                        # Improve a little bit readability.
                        print(query.replace(" where ", "\nwhere ").replace("{", "{\n").replace("}", "\n}").replace("} .", "} .\n").replace("} UNION {", " } UNION {").replace(". ?", ".\n ?").replace("\n ?", "\n  ?").replace("\n} .", "\n } .").replace("} .\n  ?", "} .\n ?"))

                    query = hackQueryParser(query, 'e0')
                    data, structure, time = oSparql.executeQuery(query)

                elif searchEngine == 2:
                    oNQP = Nepomuk.Query.QueryParser()
                    query = oNQP.parse(searchString[3:]).toSparqlQuery()
                    oNQP = None
                    query = hackQueryParser(query, 'e2')
                    if verboseMode:
                        # Improve a little bit readability.
                        print(query.replace(" where ", "\nwhere ").replace("{", "{\n").replace("}", "\n}").replace("} .", "} .\n").replace("} UNION {", " } UNION {").replace(". ?", ".\n ?").replace("\n ?", "\n  ?").replace("\n} .", "\n } .").replace("} .\n  ?", "} .\n ?"))

                    data, structure, time = oSparql.executeQuery(query)

                else:
                    oSparql.stdoutQuery = verboseMode
                    oSparql.columns = '?x0 AS ?id ' + oSparql.columns
                    data, structure, time = oSparql.executeQuery(oSparql.buildQuery(searchString))
                    warningsList = oSparql.warningsList
                    oSparql.warningsList = []

                oSparql = None

                if displayResults in (None, True):
                    oDataFormat = cDataFormat(searchString, self.screenWidth)
                    oDataFormat.formatAsText(data, structure, time)

                output = "\n%(records)s records found in %(seconds).4f seconds.\n" \
                         "--\n" \
                         "Powered by %(name)s %(version)s (%(date)s)" \
                         % {'records': len(data),
                             'seconds': time,
                             'name': PROGRAM_NAME,
                             'version': PROGRAM_VERSION_VERSION,
                             'date': PROGRAM_VERSION_DATE}

                # Handle possible warnings.
                warningMsg = ""
                for warning in warningsList:
                    if warningMsg != "":
                        warningMsg += "\n\n"

                    if warning[0] == "BUG001":
                        warningMsg += "There is a know bug using negation without a shortcut.\n" \
                                      "Please notice that the results may be inaccurate.\n\n"
                        for i in range(1, len(warning)):
                            warningMsg += "Change \"%s\" for something like \"title:%s\" to solve this issue.\n" \
                                          % (warning[i], warning[i])

                    #else:
                        #pass

                warningsList = []

                if warningMsg != "":
                    output += '\n\nWARNING: ' + warningMsg

            else:
                raise Exception('Please, type something.')

        #try:
        #    pass

        except KeyboardInterrupt:
            output = "\nOperation aborted by user...\n" \
                     "\n--\n" \
                     "Powered by %(name)s %(version)s (%(date)s)" \
                     % {'title': 'Querying Nepomuk',
                     'error': sys.exc_info()[1],
                     'name': PROGRAM_NAME,
                     'version': PROGRAM_VERSION_VERSION,
                     'date': PROGRAM_VERSION_DATE}

        except:
            msgError = "%s" % sys.exc_info()[1]
            if msgError == 'help':
                output = buildHelp()

            else:
                output = "\nerror: %(error)s\n" \
                         "\n--\n" \
                         "Powered by %(name)s %(version)s (%(date)s)" \
                         % {'title': 'Querying Nepomuk',
                         'error': sys.exc_info()[1],
                         'name': PROGRAM_NAME,
                         'version': PROGRAM_VERSION_VERSION,
                         'date': PROGRAM_VERSION_DATE}

        print(output)


if __name__ == "__main__":
    display = os.getenv("DISPLAY")
    if display is None:
        os.putenv("DISPLAY", ":0")

    main(sys.argv)
